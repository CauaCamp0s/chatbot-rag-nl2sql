generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model photo_air_occcurrences {
  id                Int            @id @default(autoincrement())
  occurrence_air_id Int
  path              String         @db.VarChar(255)
  occurrence_air    occurrence_air @relation(fields: [occurrence_air_id], references: [id], onDelete: Cascade)

  @@index([occurrence_air_id], map: "occurrence_air_id")
}

model photos_land_occurrences {
  id                 Int             @id @default(autoincrement())
  occurrence_land_id Int
  path               String          @db.VarChar(255)
  occurrence_land    occurrence_land @relation(fields: [occurrence_land_id], references: [id], onDelete: Cascade)

  @@index([occurrence_land_id], map: "occurrence_land_id")
}

model occurrence_air {
  id                     Int                             @id @default(autoincrement())
  date_time              DateTime                        @db.DateTime(0)
  date_time_completion   DateTime?                       @db.DateTime(0)
  pilot_id               Int
  address                String                          @db.Text
  zip_code               String                          @db.VarChar(20)
  street_direction       occurrence_air_street_direction
  type                   occurrence_air_type
  zone                   occurrence_air_zone
  quantity               Int
  status                 occurrence_air_status
  photo_start            String                          @db.VarChar(255)
  photo_final            String?                         @db.VarChar(255)
  latitude_coordinate    Decimal                         @db.Decimal(10, 6)
  longitude_coordinate   Decimal                         @db.Decimal(10, 6)
  description            String                          @db.Text
  is_active              Int                             @default(1)
  neighborhood           neighborhood
  width                  Decimal?                        @db.Decimal(10, 2)
  length                 Decimal?                        @db.Decimal(10, 2)
  observation            String?                         @db.Text
  pilot                  pilot                           @relation(fields: [pilot_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "occurrence_air_ibfk_1")
  photo_air_occcurrences photo_air_occcurrences[]
  photo_in_progress      photo_in_progress[]
  service_order          service_order[]
  videos                 video[]

  @@index([pilot_id], map: "pilot_id")
}

model occurrence_land {
  id                     Int                              @id @default(autoincrement())
  date_time              DateTime                         @db.DateTime(0)
  date_time_completion   DateTime?                        @db.DateTime(0)
  pilot_id               Int
  address                String                           @db.Text
  zip_code               String                           @db.VarChar(20)
  street_direction       occurrence_land_street_direction
  type                   occurrence_land_type
  zone                   occurrence_land_zone
  quantity               Int
  status                 occurrence_land_status
  photo_start            String                           @db.VarChar(255)
  photo_final            String?                          @db.VarChar(255)
  latitude_coordinate    Decimal                          @db.Decimal(10, 6)
  longitude_coordinate   Decimal                          @db.Decimal(10, 6)
  description            String                           @db.Text
  is_active              Int                              @default(1)
  neighborhood           neighborhood
  observation            String?                          @db.Text
  pilot                  pilot                            @relation(fields: [pilot_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "occurrence_land_ibfk_1")
  photo_in_progress      photo_in_progress[]
  photo_land_occurrences photos_land_occurrences[]
  service_order          service_order[]

  @@index([pilot_id], map: "pilot_id")
}

model video {
  id                Int            @id @default(autoincrement())
  url               String         @db.VarChar(255)
  occurrence_air_id Int
  createdAt         DateTime       @default(now()) @db.DateTime(0)
  occurrence_air    occurrence_air @relation(fields: [occurrence_air_id], references: [id], onDelete: Cascade)

  @@index([occurrence_air_id], map: "video_occurrence_air_id_fkey")
}

model pilot {
  id              Int               @id @default(autoincrement())
  name            String            @unique(map: "name") @db.VarChar(255)
  occurrence_air  occurrence_air[]
  occurrence_land occurrence_land[]
  route           route[]
  service_order   service_order[]
}

model service_order {
  id                      Int                                 @id @default(autoincrement())
  quantity                Int
  status                  service_order_status
  date_time               DateTime                            @db.DateTime(0)
  pilot_id                Int
  land_occurrence_id      Int?
  air_occurrence_id       Int?
  occurrence_type         service_order_occurrence_type
  occurrence_type_land    service_order_occurrence_type_land?
  occurrence_type_air     service_order_occurrence_type_air?
  responsible_id          Int?
  responsible_assigned_at DateTime?
  random_code             Int?                                @unique
  pilot                   pilot                               @relation(fields: [pilot_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "service_order_ibfk_1")
  occurrence_land         occurrence_land?                    @relation(fields: [land_occurrence_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "service_order_ibfk_2")
  occurrence_air          occurrence_air?                     @relation(fields: [air_occurrence_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "service_order_ibfk_3")
  responsible             user?                               @relation(fields: [responsible_id], references: [id])

  @@index([air_occurrence_id], map: "idx_air_occurrence")
  @@index([land_occurrence_id], map: "idx_land_occurrence")
  @@index([pilot_id], map: "pilot_id")
  @@index([responsible_id], map: "idx_responsible")
}

model user {
  id            Int             @id @default(autoincrement())
  email         String          @unique @db.VarChar(255)
  password      String          @db.VarChar(100)
  name          String          @db.VarChar(255)
  role          String          @db.VarChar(100)
  avatar        String?         @db.VarChar(255)
  is_active     Int             @default(1)
  chatHistories ChatHistory[]
  otps          OTP?
  log           log[]
  service_order service_order[]
}

model OTP {
  id        Int      @id @default(autoincrement())
  code      String
  email     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      user     @relation(fields: [email], references: [email])
}

model log {
  id         Int      @id @default(autoincrement())
  reason     String   @db.Text
  occurredAt DateTime @db.DateTime(0)
  action     String   @db.Text
  userId     Int?
  ip         String   @db.VarChar(45)
  route      String   @db.VarChar(255)
  method     String   @db.VarChar(10)
  user       user?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId], map: "idx_user")
}

model route {
  id        Int      @id @default(autoincrement())
  pilotId   Int
  latitude  Decimal  @db.Decimal(10, 6)
  longitude Decimal  @db.Decimal(10, 6)
  date      DateTime @db.DateTime(0)
  pilot     pilot    @relation(fields: [pilotId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([pilotId], map: "idx_pilot")
}

model ChatHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  question  String   @db.Text
  sqlQuery  String   @db.Text
  response  String   @db.Text
  rawData   String?  @db.Text
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user")
}

model photo_in_progress {
  id                 Int              @id @default(autoincrement())
  occurrence_air_id  Int?
  path               String           @db.VarChar(255)
  occurrence_land_id Int?
  occurrence_air     occurrence_air?  @relation(fields: [occurrence_air_id], references: [id], onDelete: Cascade)
  occurrence_land    occurrence_land? @relation(fields: [occurrence_land_id], references: [id], onDelete: Cascade)

  @@index([occurrence_air_id], map: "occurrence_air_id")
  @@index([occurrence_land_id], map: "occurrence_land_id")
}

enum service_order_status {
  Pendente
  Resolvida
  EmAnalise
  EmAndamento
}

enum occurrence_air_street_direction {
  Nordeste
  Sudoeste
  Sudeste
  Noroeste
}

enum occurrence_land_street_direction {
  Nordeste
  Sudoeste
  Sudeste
  Noroeste
}

enum occurrence_land_type {
  Drenagem
  BuracoNaRua
  CalcadaIrregular
  FioEmaranhado
  MeioFio
}

enum occurrence_air_type {
  Drenagem
  BuracoNaRua
  CalcadaIrregular
  FioEmaranhado
  MeioFio
}

enum service_order_occurrence_type {
  Solo
  Aerea
}

enum occurrence_land_zone {
  Norte
  Sul
  Leste
  Oeste
  Centro
  Expansao
  SantaMaria
}

enum service_order_occurrence_type_land {
  Drenagem
  BuracoNaRua
  CalcadaIrregular
  FioEmaranhado
  MeioFio
}

enum occurrence_air_zone {
  Norte
  Sul
  Leste
  Oeste
  Centro
  Expansao
  SantaMaria
}

enum service_order_occurrence_type_air {
  BuracoNaRua
  CalcadaIrregular
  FioEmaranhado
  MeioFio
}

enum occurrence_air_status {
  Pendente
  Resolvido
  EmAnalise
  EmAndamento
  EmFila
}

enum occurrence_land_status {
  Pendente
  Resolvido
  EmAnalise
  EmAndamento
  EmFila
}

enum neighborhood {
  Centro
  Getulio_Vargas         @map("Get√∫lio_Vargas")
  Cirurgia
  Pereira_Lobo
  Suissa                 @map("Su√≠ssa")
  Salgado_Filho
  Treze_de_Julho
  Dezoito_do_Forte
  Palestina
  Santo_Antonio          @map("Santo_Ant√¥nio")
  Industrial
  Santos_Dumont
  Jose_Conrado_de_Araujo @map("Jos√©_Conrado_de_Ara√∫jo")
  Novo_Paraiso           @map("Novo_Para√≠so")
  America                @map("Am√©rica")
  Siqueira_Campos
  Soledade
  Lamarao                @map("Lamar√£o")
  Cidade_Nova
  Japao_zinho            @map("Jap√£ozinho")
  Porto_Dantas
  Bugio
  Jardim_Centenario      @map("Jardim_Centen√°rio")
  Olaria
  Capucho
  Jabotiana
  Ponto_Novo
  Luzia
  Grageru
  Jardins
  Inacio_Barbosa         @map("In√°cio_Barbosa")
  Sao_Conrado            @map("S√£o_Conrado")
  Farolandia             @map("Farol√¢ndia")
  Coroa_do_Meio
  Aeroporto
  Atalaia
  Santa_Maria
  Zona_de_Expansao       @map("Zona_de_Expans√£o")
  Sao_Jose               @map("S√£o_Jos√©")
}
